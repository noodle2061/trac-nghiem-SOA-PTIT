Câu 1. Ví dụ nào dưới đây là thuộc tính phi chức năng của dịch vụ web là gì?
A. Quản lý dữ liệu hiệu quả
B. Giao diện người dùng dễ sử dụng
==C. Thời gian đáp ứng yêu cầu
D. Tích hợp với các hệ thống khác

Câu 2. Trong việc xây dựng một dịch vụ web bán hàng, việc áp dụng độ mịn như thế nào có thể giúp tăng khả năng mở rộng của hệ thống?
==A. Áp dụng độ mịn để chia nhỏ các chức năng như quản lý sản phẩm, quản lý đơn hàng, thanh toán
B. Áp dụng độ mịn để gộp các chức năng bán hàng thành một dịch vụ duy nhất
C. Áp dụng độ mịn không ảnh hưởng đến khả năng mở rộng của hệ thống
D. Áp dụng độ mịn chỉ cần xác định các API cho việc bán hàng

Câu 3. Fine-grained và Coarse-grained khác nhau như thế nào về khả năng tái sử dụng của dịch vụ?
A. Fine-grained có khả năng tái sử dụng cao
==B. Coarse-grained có khả năng tái sử dụng cao
C. Fine-grained có khả năng tái sử dụng hạn chế
D. Cả 2 đều có khả năng tái sử dụng như nào

Câu 4. SOA là viết tắt của từ gì?
A. Service - Orienting Architecture
B. Service - Orientation Architecture
C. Society of Architecture
==D. Service - Oriented Architecture

Câu 5. Loại dịch vụ nào thường tương ứng với logic quy trình kinh doanh mục tiêu, bao gồm logic ghép nối các dịch vụ khác để hoàn thành nhiệm vụ?
==A. Task service
B. Microservice
C. Entity service
D. Utility service

Câu 6. Mục đích của bước phân tách chức năng trong phá vỡ vấn đề nghiệp vụ là gì?
A. Tăng tính linh hoạt và mở rộng của hệ thống phần mềm
B. Giảm độ phức tạp của hệ thống phần mềm
C. Tối ưu hóa hiệu suất của hệ thống phần mềm
==D. Phân tách một vấn đề lớn hơn thành các vấn đề nhỏ hơn mà các đơn vị logic giải pháp tương ứng có thể được xây dựng

Câu 7. Trong kiến trúc hướng dịch vụ, REST (Representational State Transfer) là gì?
A. Một giao thức truyền tải dữ liệu giữa các dịch vụ
==B. Một mô hình kiến trúc phục vụ cho việc truyền tải các tài nguyên qua giao thức HTTP
C. Một phương pháp tạo ra các dịch vụ mạng phân tán
D. Một công nghệ dựa trên SOAP để tạo ra các dịch vụ web

Câu 8. Sự khác biệt chính giữa RESTful services và SOAP-based web services trong phân tích hướng dịch vụ là gì?
==A. Tối ưu hóa hiệu suất của các dịch vụ
B. Xác định ranh giới chính xác cho các dịch vụ
C. Xác định giao diện của các dịch vụ
D. Xác định các thực thể kinh doanh cần dịch vụ hỗ trợ

Câu 9. Sự khác biệt chính giữa RESTful services và SOAP-based web services trong phân tích hướng dịch vụ là gì?
==A. RESTful services sử dụng các phương thức HTTP tiêu chuẩn và tập trung vào tài nguyên, trong khi SOAP-based web services sử dụng SOAP và tập trung vào các hoạt động
B. RESTful services sử dụng XML để truyền dữ liệu, trong khi SOAP-based web services sử dụng JSON
C. RESTful services đòi hỏi tuân thủ nhiều tiêu chuẩn WS-*, trong khi SOAP-based web services đơn giản hơn và ít tiêu chuẩn hơn
D. RESTful services không sử dụng HTTP/HTTPS, trong khi SOAP-based web services chỉ sử dụng HTTP/HTTPS

Câu 10. Hợp đồng dịch vụ Web được thiết kế để phản ánh chính xác điều gì?
A. Cách triển khai dịch vụ
==B. Ngữ cảnh và chức năng của các ứng viên dịch vụ tương ứng của chúng
C. Phần mềm cơ sở hạ tầng
D. Phân tích và thiết kế hệ thống

Câu 11. Loại dịch vụ nào ít bị ảnh hưởng nhất bởi các lớp dịch vụ khác?
==A. Dịch vụ tiện ích
B. Dịch vụ tác vụ
C. Dịch vụ thực thể
D. Dịch vụ vi mô

Câu 12. Hợp đồng dịch vụ Web giúp xác định điều gì?
==A. Cách dịch vụ giao tiếp với khách hàng
B. Cách dịch vụ lưu trữ dữ liệu
C. Cách dịch vụ xử lý dữ liệu.
D. Cách dịch vụ bảo mật thông tin

Câu 13. Which protocol is commonly used for synchronous HTTP communication between services?
==A. gRPC
B. WebSockets
C. SMTP
D. Kafka

Câu 14. Why is idempotency important in asynchronous communication?
A. To increase bandwidth
B. To reduce latency
==C. To ensure reliable retries
D. To optimize caching

Câu 15. What does the transaction script pattern typically use?
A. Object references
==B. Flat procedures
C. Event-driven architecture
D. Command-query separation

Câu 16. What pattern ensures data consistency across microservices?
A. Domain event
B. Transaction script
C. Aggregate
==D. Saga

Câu 17. Which method best helps monitor distributed microservices?
A. Spreadsheets
B. System.out.println logs
==C. Centralized logging and tracing
D. Manual inspection

Câu 18. Which protocol is commonly used in microservices for communication?
A. SMTP
==B. HTTP/REST
C. FTP
D. POP3

Câu 19. How do service meshes like Istio help in deployment strategies?
A. They encrypt disks
B. They manage user permissions
==C. They allow fine-grained traffic routing
D. They store container images

Câu 20. Which method helps to control traffic flow during progressive delivery?
A. Webhooks
B. Feature flags
==C. Service mesh
D. Sidecar pattern

Câu 21. In event sourcing, what is an 'event' typically?
A. An object describing a user interface action
B. A notification for external systems
==C. A record of something that has occurred in the system
D. A script executed on database change

Câu 22. Which combination often supports scalable and flexible microservice systems?
A. SOAP and Eventual Consistency
B. REST and Event Replay
==C. CQRS and Event Sourcing
D. CRUD and Load Balancing

Câu 23. Which of the following best describes GraphQL in the context of API gateways?
A. It only works for REST services
B. It is a messaging queue
==C. It simplifies API composition by allowing clients to specify data needs
D. It replaces microservices

Câu 24. Which factor is NOT a common motivation for using API gateways?
A. Centralizing concerns like security
B. Reducing coupling between clients and services
==C. Providing direct access to all service APIs
D. Simplifying response aggregation

Câu 25. What is the main characteristic of synchronous communication between microservices?
A. Messages are queued before delivery
B. Requests are fire-and-forget
==C. Client waits for immediate response
D. Data is transferred in batch

Câu 26. What is a common drawback of tightly coupled service communication?
A. Improved fault tolerance
B. Increased system observability
==C. Reduced deployment flexibility
D. Faster communication

Câu 27. What is the primary responsibility of the Query side in a microservices architecture?
A. To handle incoming commands and update data
==B. To listen for domain events and update read models
C. To manage authentication and authorization
D. To generate API documentation

Câu 28. In a CQRS system, how should you resolve inconsistencies in the query model caused by event processing delays?
==A. By retrying failed events and implementing compensating mechanisms
B. By switching to synchronous write-read
C. By ignoring the delays
D. By updating the read model manually

Câu 29. What does ACID stand for in transaction management?
==A. Atomicity, Consistency, Isolation, Durability
B. Automation, Compatibility, Integrity, Deployment
C. Access, Coordination, Integrity, Distribution
D. Atomicity, Centralization, Implementation, Durability

Câu 30. Why is the two-phase commit protocol considered unsuitable for microservices?
A. It is too fast
B. It lacks security
==C. It introduces tight coupling and blocking
D. It doesn’t support NoSQL

Câu 31. Nếu không cài đặt gì thêm, SOAP hay REST có thể sử dụng máy chủ caching?
A. SOAP
==B. REST
C. Cả SOAP và REST đều có thể sử dụng máy chủ caching
D. Không SOAP và REST đều không thể sử dụng máy chủ caching

Câu 32. Dịch vụ web SOAP có hợp đồng không?
==A. Có
B. Không
C. Đôi khi
D. Tùy thuộc

Câu 33. Cho đoạn mã nguồn:

@Path("/products")
public class ProductResource {
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProducts() {
        // Get all products from the database.
        return Response.ok(products).build();
    }

    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response createProduct(Product product) {
        // Create a new product in the database.
        return Response.ok().build();
    }

    @PUT
    @Path("{id}")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response updateProduct(@PathParam("id") long id, Product product) {
        // Update the product with the given ID in the database.
        return Response.ok().build();
    }

    @DELETE
    @Path("{id}")
    public Response deleteProduct(@PathParam("id") long id) {
        // Delete the product with the given ID from the database.
        return Response.ok().build();
    }
}

Phương thức HTTP cho phương thức deleteProduct() là gì?
A. GET
B. POST
C. PUT
==D. DELETE

Câu 34. Cho đoạn mã nguồn:

@Path("/products")
public class ProductResource {
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProducts() {
        // Get all products from the database.
        return Response.ok(products).build();
    }

    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response createProduct(Product product) {
        // Create a new product in the database.
        return Response.ok().build();
    }

    @PUT
    @Path("{id}")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response updateProduct(@PathParam("id") long id, Product product) {
        // Update the product with the given ID in the database.
        return Response.ok().build();
    }

    @DELETE
    @Path("{id}")
    public Response deleteProduct(@PathParam("id") long id) {
        // Delete the product with the given ID from the database.
        return Response.ok().build();
    }
}

Kiểu dữ liệu cho phương thức updateProduct() là gì?
==A. multipart/form-data
B. application/json
C. application/xml
D. image/jpeg

Câu 35. Cho đoạn mã nguồn:

@Path("/products")
public class ProductResource {
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProducts() {
        // Get all products from the database.
        return Response.ok(products).build();
    }

    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response createProduct(Product product) {
        // Create a new product in the database.
        return Response.ok().build();
    }

    @PUT
    @Path("{id}")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response updateProduct(@PathParam("id") long id, Product product) {
        // Update the product with the given ID in the database.
        return Response.ok().build();
    }

    @DELETE
    @Path("{id}")
    public Response deleteProduct(@PathParam("id") long id) {
        // Delete the product with the given ID from the database.
        return Response.ok().build();
    }
}

HTTP Request nào sẽ được chuyển cho getProducts () ?
A. Phương thức POST, đường dẫn /products
B. Phương thức PUT, đường dẫn /products
C. Phương thức GET, đường dẫn /products/15
==D. Phương thức GET, đường dẫn /products

Câu 36. WSDL được sử dụng để làm gì?
A. Phát triển ứng dụng web
==B. Mô tả các web service và cung cấp thông tin về chúng
C. Quản lý cơ sở dữ liệu
D. Phát triển ứng dụng di động

Câu 37. Trong SOAP, các phương thức được định nghĩa trong phần nào của tài liệu WSDL?
A. Binding
B. Service
==C. PortType
D. Message

Câu 38. Cho định nghĩa WSDL:

<wsdl:definitions ... targetNamespace="http://www.example.com/onlinecharging">
  <wsdl:types>
    <xsd:schema ...>
      <xsd:element name="ChargeResult">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Status" type="xsd:string" minOccurs="1" />
            <xsd:element name="Message" type="xsd:string" minOccurs="1" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>

  <wsdl:message name="ChargeResponse">
    <wsdl:part name="result" element="tns:ChargeResult" />
  </wsdl:message>

  <wsdl:portType name="OnlineChargingPortType">
    <wsdl:operation name="Charge">
      <wsdl:input message="tns:ChargeRequest" />
      <wsdl:output message="tns:ChargeResponse" />
    </wsdl:operation>
  </wsdl:portType>
  ...
</wsdl:definitions>

Tên phần tử đại diện cho kết quả của giao dịch nạp tiền trong tệp WSDL là gì?
A. ChargeResponse
==B. ChargeResult
C. ChargeData
D. ChargeDetails

Câu 39. Cho định nghĩa WSDL:

<definitions ... targetNamespace="http://www.example.com/accountRegistration">
  <message name="RegisterAccount">
    <part name="parameters" element="tns:Account"/>
  </message>
  <message name="RegisterAccountResponse">
    <part name="parameters" element="tns:AccountResponse"/>
  </message>

  <portType name="AccountRegistrationPortType">
    <operation name="RegisterAccount">
      <input message="tns:RegisterAccount"/>
      <output message="tns:RegisterAccountResponse"/>
    </operation>
  </portType>

  <binding name="AccountRegistrationBinding" type="tns:AccountRegistrationPortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="RegisterAccount">
      <soap:operation soapAction="http://www.example.com/accountRegistration/RegisterAccount"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>

  <service name="AccountRegistrationService">
    <port name="AccountRegistrationPort" binding="tns:AccountRegistrationBinding">
      <soap:address location="http://www.example.com/accountRegistration"/>
    </port>
  </service>
</definitions>

Dịch vụ web tên gì?
==A. AccountRegistrationService
B. AccountRegistration
C. AccountRegistrationPortType
D. AccountRegistrationBinding

Câu 40. Cho định nghĩa WSDL:

<definitions ... targetNamespace="http://www.example.com/accountRegistration">
  <message name="RegisterAccount">
    <part name="parameters" element="tns:Account"/>
  </message>
  <message name="RegisterAccountResponse">
    <part name="parameters" element="tns:AccountResponse"/>
  </message>

  <portType name="AccountRegistrationPortType">
    <operation name="RegisterAccount">
      <input message="tns:RegisterAccount"/>
      <output message="tns:RegisterAccountResponse"/>
    </operation>
  </portType>

  <binding name="AccountRegistrationBinding" type="tns:AccountRegistrationPortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="RegisterAccount">
      <soap:operation soapAction="http://www.example.com/accountRegistration/RegisterAccount"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>

  <service name="AccountRegistrationService">
    <port name="AccountRegistrationPort" binding="tns:AccountRegistrationBinding">
      <soap:address location="http://www.example.com/accountRegistration"/>
    </port>
  </service>
</definitions>

Thực thi dịch vụ tên gì ?
==A. AccountRegistrationService
B. AccountRegistration
C. AccountRegistrationPortType
D. AccountRegistrationBinding